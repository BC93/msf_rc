# Author: Brian Coffey
# Resource script to automate the scanning / enumeration in msfconsole for OSCP, since you can't use metasploit's modules on the exam...
# but they don't say anything about using it's beautiful database & framework ;)



# Change xhost to whatever subnet you need.

echo "test"

<ruby>

print_line("test2")
nse_dir = "/root/projects/offsec/msf/nse/"

# I'm more familiar with python, so I wrote this part in python.
# Automatically gets & sets ip address using kernel routing table to extranet (aka gmail.com, port 80)
subnet = %x`python -c "import socket; s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect(('gmail.com',80));  host = s.getsockname()[0]; s.close(); g = host.split('.'); subnet = '{}.{}.{}.1/24'.format(g[0],g[1], g[2]); print subnet"`

print_line("#{subnet}")

#run_single("setg RHOSTS #{subnet}")

# basic discovery, working on implementing a few of the discovery nses into this.
#run_single("db_nmap --open  -T5 #{subnet} -v50")

framework.db.hosts.each do |host|
    print_line("hosts")

    %x`mkdir /root/projects/offsec/msf/output/#{host.address}`

    xhost = host.address

    # TODO: make this section enumerate open ports that were missed during discovery; syn, ack, tcp, udp, cookie echo , etc only miss crazy ports.

    # TODO: Look into threading for this part

    # I use --open to only report hosts that are up
    # --version-intensity *seems* to report the software version better and finds the
    # version for more services -- I might just be crazy though.
    # port-ratio -- for the most part i noticed most services are running on default ports,
    # and when I find services on unexpected ports I haven't had the greatest luck enumerating them
    # anways. ( with a few exceptions. )
    # This way i'm testing the top 80% of most common ports, if my understanding is wrong 
    # please correct me.

    run_single("db_nmap --open  --top-ports=500 -PR -sV -PA -T5 -F #{xhost}")

    run_single("db_nmap --open  -n -sS -sT -T5 -v50 -sA #{xhost} --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -sM --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -sW --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -sU --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -sN -sF  --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -s0  --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -sZ  --top-ports=5000")

    run_single("db_nmap --open  -n -T5 -v50  -sV --version-intensity 9 --port-ratio .8 #{xhost} -sY  --top-ports=5000")

    run_single("db_nmap --open  --top-ports=500 -SR -sV -SA -T5 -F #{xhost}")

    print_line(" before serv")

    # TODO: Add a sleep function here to wait for the results of the port scans above -- after the threading has been implemented.

    host.services.each do |serv|

    # TODO:  add  nse scans for the following services: couchdb,apache, $more?

    next if not serv.host

    next if (serv.state !=Msf::ServiceState::Open)
    print_line(" before long or list")
    next if not(

        serv.name =~/citrix/ or

        serv.name =~/cups/ or

        serv.name =~/discovery/ or

        serv.name =~/dns/ or

        serv.name =~/ftp/ or

        serv.name =~/http/ or

        serv.name =~/imap/ or

        serv.name =~/irc/ or

        serv.name =~/ldap/ or

        serv.name =~/mongo/ or

        serv.name =~/mysql/ or

        serv.name =~/ncp/ or

        serv.name =~/netbus/ or

        serv.name =~/nfs/ or

        serv.name =~/oracle/ or

        serv.name =~/pnp/ or

        serv.name =~/pop3/ or

        serv.name =~/rdp/ or

        serv.name =~/smb/ or

        serv.name =~/smtp/ or

        serv.name =~/snmp/ or

        serv.name =~/sql/ or

        serv.name =~/ssh/ or

        serv.name =~/ssl/ or

        serv.name =~/vnc/ )

    xport = serv.proto 

    xname = serv.name

    oname = host.os_name

    print_line("Enumerating #{xname} on port #{xport} for #{xhost}")

        #/gt1 = Thread.new {

            #/gprint_line("Running Thread 1")
            #/grun_single("db_nmap --open  -sV -A --script='#{nse_dir}/#{nse_dir}#{xname}' #{xhost} -v50 -n -T3  ")
            #/g}
            # *FIXME fix
    if (xname =~/ssh/)
        print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
        t1 = Thread.new {
            print_line("Running Thread 1")
            run_single("db_nmap -sV -A --script='#{nse_dir}/ssh' #{xhost} -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
            }
        t1.join
    elsif (xname =~/smtp/)
        print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
        t2 = Thread.new {
            run_single("db_nmap -sV -A --script='#{nse_dir}/smtp' #{xhost} -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
            print_line("running thread 2")
            }
        t2.join
    elsif (xname =~/snmp/)
        t3 = Thread.new { 
        print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
        run_single("db_nmap -sV -A -sU#{xport} #{xport} --script='#{nse_dir}/snmp' #{xhost} -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
        }
    t3.join
    elsif (xname =~/smb/)
        t4 = Thread.new { 
            print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
            run_single("db_nmap -sV -A   --script='#{nse_dir}/smb/' #{xhost} -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
            }
        t4.join
    elsif (xname =~/http/)
        t5 = Thread.new {
            print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
            run_single("db_nmap -sV -A    --script='#{nse_dir}/http/' #{xhost} -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
            }
        t5.join
    elsif (xname =~/ftp/)
        t6 = Thread.new {
            print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
            run_single("db_nmap -sV -A --script='#{nse_dir}/ftp/' #{xhost}   -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
            }
        t6.join
    else (xname =~/ssl/)
        t7 = Thread.new {
            print_line("Enumerating #{xname} on port #{xport} for #{xhost}")
            run_single("db_nmap -sV -A --script='#{nse_dir}/ssl/' #{xhost}   -v50 -n -T3  -o /root/projects/offsec/msf/output/#{xhost}/#{xname}")
           }
        t7.join



    end 

end 

#   Cleanup our services to only see 'Open' services, as thats all we're 
# interested in ... if it's still 'closed' or 'filtered' we're not getting
# in that way anyway.
run_single("services -S closed -d")
run_single("service -S filtered -d")
end

</ruby>
